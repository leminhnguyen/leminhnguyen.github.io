[{"authors":null,"categories":null,"content":" An AI Engineer specializing in Speech and Natural Language Processing (NLP) with a strong background in building and deploying advanced speech recognition and natural language solutions. I am passionate about leading deep learning initiatives, transforming cutting-edge research into scalable, production-grade AI systems. I emphasize innovation, user-centric development, and operational efficiency to deliver impactful real-world applications. Education Master’s Degree in Computer Science (2022 - 2024)\nHanoi University of Science and Technology | Good Degree, TOEIC 785\nEngineer’s Degree in Software Engineering (2016 - 2021)\nHanoi University of Science and Technology | Valedictorian, CPA 3.75\nWork Experience CMC Corporation\nHead of Speech Research\nLed a 5-member Speech Research Team, covering domains such as Speech-To-Text, Speaker Diarization, Speaker Verification, Voice Cloning, Voice Conversion and Audio LLM. Vbee JSC\nAI Engineer\nLed the TTS (Text-to-Speech) core team in researching and deploying cutting-edge TTS models on cloud infrastructures (AWS, GCP). Developed TTS core modules, represented Vbee at major conferences and events, and enhanced the company’s reputation in the AI Voice industry. Key Projects AI Voice Recording System\nHeaded the development of a AI Voice System for insurance partners, utilizing advanced speech recognition technologies to deliver real-time, accurate speech to text conversion. Designed and implemented speaker diarization to effectively differentiate and identify multiple speakers, improving the clarity and accuracy of transcriptions. Developed and integrated intent recognition models to analyze spoken content, ensuring accurate identification of user intentions. Optimized the system to ensure advisory content strictly adheres to prescribed scripts, improving compliance with industry standards and enhancing customer service efficiency. Leveraged ONNX for converting speech models and implemented OpenVINO optimizations to accelerate AI inference on Intel hardware, significantly boosting 2x model performance AI Call Center Caching System\nDeveloped for Vbee AI Call Center (AICC – vbee.ai/aicall), an AI-powered platform designed to automate customer service interactions. Designed and implemented a caching system leveraging the Viterbi algorithm to identify and reuse the best-synthesized audio, significantly reducing infra costs. Led research, implementation, and deployment on AWS, ensuring high scalability, availability, and efficient resource utilization. Achieved a stable system operation, resulting in an 85% reduction in infra costs. Optimized real-time model performance using asynchronous programming techniques and parallel execution to handle multiple concurrent requests efficiently. Text To Speech Core System\nDesigned and built the TTS Core Module for Vbee (vbee.vn), specializing in high-quality voice solutions. Led the TTS Core team in researching, developing, and deploying state-of-the-art TTS models to AWS cloud infrastructure. Developed a hate speech detection model integrated into a TTS system to filter harmful content before conversion to speech. Enabled Vbee to strengthen its position as one of the top AI voice service providers in Vietnam through this core system Honors \u0026 Awards Excellent Scholarship | 2016-2020 Outstanding Student | 2021 Best Presentation Awards in Graduate Thesis | 2021 1st Rank in VLSP 2021 competition (1 published journal paper) | 2021 2nd Prize, Nhan Tai Dat Viet 16th | 2022 Vbee's Outstanding Employee of the Year | 2022 Excellent Employee at the 10th anniversary celebration of CMC ATI | 2024 ","date":1709982077,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1709982077,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"An AI Engineer specializing in Speech and Natural Language Processing (NLP) with a strong background in building and deploying advanced speech recognition and natural language solutions. I am passionate about leading deep learning initiatives, transforming cutting-edge research into scalable, production-grade AI systems.","tags":null,"title":"Minh Nguyen Le","type":"authors"},{"authors":null,"categories":["NLP","Large Language Models"],"content":" Overview Recently, OpenAI has just released the paper \u0026ldquo;Why Language Models Hallucinate\u0026rdquo; by Adam Tauman Kalai, Ofir Nachum, Santosh Vempala, and Edwin Zhang (2025).\nAbstraction: Like students facing hard exam questions, large language models sometimes guess when uncertain, producing plausible yet incorrect statements instead of admitting uncertainty. Such “hallucinations” persist even in state-of-the-art systems and undermine trust. We argue that language models hallucinate because the training and evaluation procedures reward guessing over acknowledging uncertainty, and we analyze the statistical causes of hallucinations in the modern training pipeline. Hallucinations need not be mysterious—they originate simply as errors in binary classification. If incorrect statements cannot be distinguished from facts, then hallucinations in pretrained language models will arise through natural statistical pressures. We then argue that hallucinations persist due to the way most evaluations are graded—language models are optimized to be good test-takers, and guessing when uncertain improves test performance. This “epidemic” of penalizing uncertain responses can only be addressed through a socio-technical mitigation: modifying the scoring of existing benchmarks that are misaligned but dominate leaderboards, rather than introducing additional hallucination evaluations. This change may steer the field toward more trustworthy AI systems.\nThe paper takes a deep dive into one of the most persistent problems in large language models (LLMs): hallucinations, where models generate confident but false statements. Unlike many studies that only describe symptoms or propose patchwork fixes, this work goes further to explain:\nWhy hallucinations naturally arise during pretraining, even with perfectly clean data. Why they persist after alignment and fine-tuning, largely due to how benchmarks reward “guessing” over honest uncertainty. How we can mitigate them by reforming evaluation methods, introducing confidence thresholds, and encouraging models to output “I don’t know” when appropriate. In short, the authors argue that hallucinations are not mysterious flaws, but predictable statistical errors reinforced by current evaluation practices — and that solving them requires changing how we test and reward AI models, not just tweaking training pipelines.\n1. What is hallucination? Hallucinations are plausible but false statements generated by language models. They can show up in surprising ways, even for seemingly straightforward questions. For example, when we asked a widely used chatbot for the title of the PhD dissertation by Adam Tauman Kalai (an author of the mentioned paper), it confidently produced three different answers—none of them correct. When we asked for his birthday, it gave three different dates, likewise all wrong.\n2. Findings Think about it like a multiple-choice test. If you do not know the answer but take a wild guess, you might get lucky and be right. Leaving it blank guarantees a zero. In the same way, when models are graded only on accuracy, the percentage of questions they get exactly right, they are encouraged to guess rather than say “I don’t know.”\nAs another example, suppose a language model is asked for someone’s birthday but doesn’t know. If it guesses “September 10,” it has a 1-in-365 chance of being right. Saying “I don’t know” guarantees zero points. Over thousands of test questions, the guessing model ends up looking better on scoreboards than a careful model that admits uncertainty.\n2.1. Pretraining inevitably introduces errors Pretraining is essentially a density estimation problem: the model tries to approximate the probability distribution of language. The authors show that this is closely related to a binary classification problem: deciding whether a given output is valid or invalid. From statistical learning theory, classification always has a non-zero error rate → meaning LLMs cannot avoid mistakes. Even with perfect, error-free data, hallucinations emerge because:\nSome facts are rare or unique (e.g., a birthday mentioned only once). When no pattern exists in data, the model faces epistemic uncertainty (knowledge that is simply missing). This explains why LLMs do fine on common facts (like “Einstein’s birthday”) but hallucinate rare ones. Key concept: Singleton rate\nThe fraction of facts that appear only once in training data. The higher the singleton rate, the higher the expected hallucination rate. 2.2. Post-training reinforces hallucinations After pretraining, models are fine-tuned (RLHF, RLAIF, DPO, etc.) to align with human preferences. Intuitively, one might expect this to reduce hallucinations. However, hallucinations persist because of how evaluation benchmarks are designed:\nMost benchmarks use binary grading (correct = 1, wrong = 0). “I don’t know” (IDK) or abstentions are treated as wrong (0 points). This setup rewards guessing: A model that always guesses when unsure scores higher than a model that truthfully admits uncertainty. Analogy: Like students on multiple-choice exams — guessing improves test scores, even if it produces confident wrong answers. As a result, LLMs are trained and evaluated in a permanent “test-taking mode”, where bluffing is optimal. 2.3. Why hallucinations are not mysterious Hallucinations are not unique AI quirks, but simply statistical classification errors under uncertainty. They persist because current benchmarks misalign incentives: A hallucination can improve benchmark performance. An honest abstention reduces performance. Thus, even advanced post-training cannot solve hallucinations if the evaluation system keeps rewarding them. 3. Proposed Solution Redesign evaluations to reward honesty The main recommendation: adjust scoring in existing benchmarks rather than invent new hallucination-specific tests. Benchmarks should stop penalizing abstentions and instead give credit to uncertainty when appropriate.\nExplicit confidence targets Inspired by real-world exams (e.g., SAT, GRE, Indian JEE), introduce penalties for incorrect guesses and neutral credit for IDK. Example instruction added to each benchmark task: “Answer only if you are \u0026gt;75% confident. Correct answer: +1 point, Wrong guess: –2 points, IDK: 0 points. This ensures models learn when it’s better to abstain rather than guess.\nBehavioral Calibration Instead of only reporting probabilities, models should act in accordance with their confidence level. For example:\nIf the model is \u0026lt;50% confident, it should output IDK. If highly confident, it should answer directly. This approach helps align model behavior with trustworthy communication, reducing overconfident hallucinations. 4. Bonus OpenAI claimed that ChatGPT also hallucinates. GPT‑5 has significantly fewer hallucinations especially when reasoning⁠, but they still occur. In terms of accuracy, the older OpenAI o4-mini model performs slightly better. However, its error rate (i.e., rate of hallucination) is significantly higher. Strategically guessing when uncertain improves accuracy but increases errors and hallucinations.\n","date":1757203200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1757203200,"objectID":"90b415ce91b5d880d050628be1200dbc","permalink":"https://leminhnguyen.github.io/post/nlp-research/why-llm-hallucinates/","publishdate":"2025-09-07T00:00:00Z","relpermalink":"/post/nlp-research/why-llm-hallucinates/","section":"post","summary":"Overview Recently, OpenAI has just released the paper \u0026ldquo;Why Language Models Hallucinate\u0026rdquo; by Adam Tauman Kalai, Ofir Nachum, Santosh Vempala, and Edwin Zhang (2025).\nAbstraction: Like students facing hard exam questions, large language models sometimes guess when uncertain, producing plausible yet incorrect statements instead of admitting uncertainty.","tags":["deep learning","llm","hallucination"],"title":"Why Do Language Models Hallucinate?","type":"post"},{"authors":null,"categories":["Speech","Speaker-Darization"],"content":" Speaker Diarization, the task of answering “Who spoken when?” - is an crucial component in many speech processing systems. From meeting transcription to customer service call analysis, diarization allows to segment signal by speakers, making down-stream tasks like speech-to-text, emotion analysis, or intent identification much more effective. The figure 1 below shows the speaker diarization results from my developed model on a youtube audio. Fig 1: The diarization results from my developed model In this blog, I’ll introduce the core concepts of speaker diarization, discover both traditional and end-to-end methods, and highligth one of the latest innovations in the field: Sortformer model. Whether you’re just getting started or looking to catch up recent innovations, this blog aims give you a comprehensive overview. Table of Contents Traditional Methods End-to-End Models New Breakthroughs in Diarization Conclusion 1. Traditional Methods Fig 2: Traditional Speaker Diarization Pipeline Traditional diarization systems often rely on modular pipelines, combining speaker embeddings (like i-vectors) with clustering algorithms such as Agglomerative Hierarchical Clustering (AHC). While effective, these systems require careful tuning and may struggle with overlapping speech. Those consist of many independent submodules that are optimized individually, namely being:\nSpeech Detection and Segmentation: This step detects which regions of the audio contain speech and which are silent or contain noise, then splits the speech into chunks. It usually uses energy-based thresholds, voice activity detectors (VAD), or neural classifiers to separate speech from non-speech regions. Accurate VAD is critical because missed speech or false positives directly affect downstream segmentation and labeling. One of the most popular VAD algorithms is WebRTC VAD, which uses a combination of energy and spectral features to detect speech. Speech Embedding: A neural network pre-trained on speaker recognition is used to derive a high-level representation of the speech segments. Those embeddings are vector representations that summarize the voice characteristics (a.k.a voice print). Early systems used MFCC (Mel-frequency cepstral coefficients), but more modern pipelines use i-vectors or x-vectors, which are compact representations capturing speaker identity. Speaker Clustering: After extracting segment embeddings, we need to cluster the speech embeddings with a clustering algorithm (for example K-Means or spectral clustering). The clustering produces our desired diarization results, which consists of identifying the number of unique speakers (derived from the number of unique clusters) and assigning a speaker label to each embedding (or speech segment). 2. End To End Method End-to-end (E2E) diarization models aim to integrate the entire diarization process into a single neural network architecture, reducing the need for modular tuning and improving generalization. It usually inclues core crchitecture features such as:\nJoint Learning: E2E models are trained to jointly optimize speech segmentation, speaker embedding extraction, and speaker assignment within one framework. Neural Encoders: Use convolutional neural networks (CNNs), recurrent neural networks (RNNs), or transformers to extract rich time-series representations from audio inputs. Attention Mechanisms: Incorporate self-attention layers to capture long-range dependencies across audio sequences, which is especially useful in handling speaker changes and overlapping speech. Loss Functions: Design specialized loss functions (e.g., permutation-invariant training) that help the model learn speaker assignments without being confused by label permutations. 2.1 Pyannote Audio Fig 3: Pyannote Audio Framework 2.2 Multi-Scale Diarization Nemo Speaker diarization faces a trade-off between accurately capturing speaker traits (which needs long audio segments) and achieving fine temporal resolution (which requires short segments). Traditional single-scale methods balance these but still leave gaps in accuracy, especially for short speaker turns common in conversation. To address this, a multi-scale approach is proposed, where speaker features are extracted at multiple segment lengths and combined using a multi-scale diarization decoder (MSDD). MSDD dynamically assigns weights to each scale using a CNN-based mechanism, improving diarization accuracy by balancing temporal precision and speaker representation quality. Fig 4: Multi-Scale Diarization from Nemo What Problem Does Sort Loss Solve? Speaker diarization models predict who is speaking at each frame of audio. But — the model doesn\u0026rsquo;t know speaker identities! It only uses generic speaker labels (e.g., Speaker-0, Speaker-1). Traditional training needs to match predicted speakers to ground-truth speakers, trying every possible permutation (PIL) — very expensive when many speakers exist!\nSortformer solves this by introducing Sort Loss:\nSort speakers by their speaking start time (Arrival Time Order — ATO) Always treat the first speaker as Speaker-0, second as Speaker-1, etc No need for heavy permutation matching! 🌟 What Is the Permutation Problem in Speaker Diarization? Speaker diarization systems assign speaker labels to segments of audio. But unlike speaker identification, the identities are generic Speaker-0 , Speaker-1 , etc. That creates a permutation problem: the system might label Speaker-A as Speaker-0 in one instance and Speaker-1 in another. Traditionally, this is handled using Permutation Invariant Loss (PIL) or Permutation Invariant Training (PIT):\nPIL checks all possible mappings of predicted labels to ground-truth and picks the one with the lowest loss. It becomes expensive as the number of speakers increases: time complexity is O(N!) or at best O(N³) using the Hungarian algorithm. That’s where Sortformer introduces a breakthrough idea. Why not just sort speakers by who spoke first and train the model to always follow this order? This is the foundation of Sort Loss.\nHow Sortformer Training Works The training steps are:\nInput audio ➔ Extract frame-wise features. Sort the ground-truth speakers by their start time. Model predicts frame-level speaker activities independently (using Sigmoid). Calculate Sort Loss: Match model outputs with sorted true labels using Binary Cross-Entropy. Backpropagate and update model. ✅ Speakers who speak earlier are consistently mapped to earlier speaker labels during training!\n📜 Sort Loss Formula The Sort Loss formula is: $$L_{\\text{Sort}}(Y, P) = \\frac{1}{K} \\sum_{k=1}^{K} \\text{BCE}(y_{\\eta(k)}, q_k)$$ where:\n$Y$ = ground-truth speaker activities. $P$ = predicted speaker probabilities. $\\eta(k)$ = the sorted index by arrival time. $K$ = number of speakers. BCE = Binary Cross-Entropy loss for each speaker ✅ Each speaker is evaluated independently.\n🤔 Why Binary Cross-Entropy (BCE), Not Normal Cross-Entropy? Feature Cross Entropy (CE) Binary Cross Entropy (BCE) Use case Single-label classification Multi-label classification Output Activation Softmax (probabilities sum to 1) Sigmoid (independent probabilities) Can handle overlaps? ❌ No ✅ Yes Example Pick one animal (cat, dog, rabbit) Pick all fruits you like (apple, banana, grape) In speaker diarization:\nMultiple speakers can talk at once ➔ multi-label ➔ Binary Cross Entropy is needed. Each speaker is predicted independently. 🔥 Tiny Example of Sort Loss in Action Suppose we have 2 speakers and 3 frames:\nGround-truth (after sorting):\nFrame spk0 spk1 t1 1 0 t2 1 1 t3 0 1 Predicted outputs:\nFrame spk0 spk1 t1 0.9 0.1 t2 0.6 0.8 t3 0.2 0.7 Binary Cross Entropy is applied separately for each speaker, and averaged over speakers.\n🧠 Quick Summary: Softmax vs Sigmoid Softmax Sigmoid Sum of outputs 1 Not necessarily Mutual exclusivity Yes No Application Single-label classification (only 1 class active) Multi-label classification (multiple active) Used with Cross Entropy Loss Binary Cross Entropy Loss ✅ Softmax is used with Cross Entropy.\n✅ Sigmoid is used with Binary Cross Entropy.\n📦 Conclusion ✅ Sortformer introduces a faster, more elegant solution for speaker diarization by sorting speakers by arrival time and applying simple Binary Cross-Entropy.\n✅ BCE and Sigmoid are natural choices when multiple speakers can overlap.\n✅ No more expensive permutation matching is needed!\n🏁 Final Words This approach is simpler, faster, and works better for multi-speaker real-world conversations. Stay tuned for more tutorials where we dive into multispeaker ASR models and joint training with speaker supervision!\n","date":1745798400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1745798400,"objectID":"ff5b4b146004a7d0f016aba12b27f75e","permalink":"https://leminhnguyen.github.io/post/speech-research/speaker-diarization/","publishdate":"2025-04-28T00:00:00Z","relpermalink":"/post/speech-research/speaker-diarization/","section":"post","summary":"Speaker Diarization, the task of answering “Who spoken when?” - is an crucial component in many speech processing systems. From meeting transcription to customer service call analysis, diarization allows to segment signal by speakers, making down-stream tasks like speech-to-text, emotion analysis, or intent identification much more effective.","tags":["deep learning","speaker diarization","cross entropy","sort loss","speech"],"title":"Speaker Diarization: From Traditional Methods to the Modern Models","type":"post"},{"authors":null,"categories":["NLP","Speech","Machine Learning"],"content":" Low vs High Entropy Entropy is a powerful and fundamental concept that quietly drives some of the most effective algorithms in machine learning. From decision trees to deep neural networks, entropy plays a central role in helping models navigate uncertainty and make better predictions.\nWhat Is Entropy? Originally a concept from thermodynamics, entropy measures the level of disorder or uncertainty in a system. In machine learning, it\u0026rsquo;s used to quantify how much unpredictability exists in a set of outcomes.\nTake a coin flip, for example:\nIf you flip a fair coin and get [heads, tails, tails, heads], there\u0026rsquo;s high entropy — the outcomes are unpredictable. But if you flip a weighted coin and get [tails, tails, tails, tails], entropy is low — the system is more predictable. In general:\nHigh entropy = low information gain (we learn less from each new example). Low entropy = high information gain (we learn more from each new example). Entropy in Decision Trees Entropy is the secret sauce behind decision trees. When a decision tree decides where to split the data, it doesn\u0026rsquo;t just guess—it asks:\n“Which feature split gives me the most certainty about what’s going on?”\nIt measures the entropy of each feature. The split that reduces entropy the most (i.e., gives the most information gain) gets picked. It’s like asking:\n“Which question brings me closer to the truth?”\nDecision Tree Example (source: Andre Ye) For instance, if you\u0026rsquo;re building a tree to classify colors into red or blue, and one feature creates two groups that are nearly all red and all blue—that’s low entropy, and that feature becomes a high-value decision.\nThis is why trees often start with the most informative feature at the top: to guide the rest of the tree with clarity and purpose.\nCross-Entropy in Neural Networks In deep learning, entropy shows up again—this time in disguise, as cross-entropy, a favorite loss function of neural networks. Imagine you\u0026rsquo;re training a model to classify images of cats and dogs. Cross-entropy doesn\u0026rsquo;t just care which label the model picked—it cares how confident the model was.\nIf your model says “I’m 99% sure this is a cat” and it’s correct: great. If it says “50-50, could be cat or dog” — not so great. If it’s confidently wrong — disaster. Cross-entropy punishes bad guesses and rewards confident, correct predictions. It pushes the model to not just be right, but to be sure of why it\u0026rsquo;s right. Cross-entropy measures how many bits are needed to encode the true labels using the predicted distribution. The lower the value, the better the model\u0026rsquo;s predictions match the truth.\nThis works beautifully with Softmax and Sigmoid activations, helping reduce issues like the vanishing gradient problem and giving models a smoother learning curve. This approach is:\nMore dynamic than accuracy/error-based metrics. Better at handling confidence and probability. Less sensitive to data order or noise. Related Concept: KL Divergence Another flavor of entropy is Kullback–Leibler divergence (KL divergence). Think of it as a way to measure the \u0026ldquo;distance\u0026rdquo; between two probability worlds:\nOne world is what actually happens (distribution p). The other is what your model thinks will happen (distribution q). KL divergence tells you how far off your model is—and how much it needs to learn. It’s like a map for loss, guiding your model back toward reality.\nGANs (Generative Adversarial Networks) use this idea to help the generator produce images that look increasingly real. The better it gets at mimicking the real distribution, the smaller the divergence.\nWhy Entropy Matters Unlike rigid metrics like accuracy, entropy-based measures capture the uncertainty and depth of the problem space. They allow models to:\nLearn better under uncertainty. Make probabilistic predictions. Avoid problems like vanishing gradients (especially when used with softmax or sigmoid activations). Whether you\u0026rsquo;re building a decision tree, training a neural network, or experimenting with probabilistic models, entropy is the invisible force guiding better decisions.\nFinal Thoughts Entropy might seem abstract at first, but it captures a truth at the heart of machine learning: we are always trying to reduce uncertainty. By optimizing for entropy-based metrics like information gain, cross-entropy, or KL divergence, we empower our models to learn faster, perform better, and make smarter predictions.\nEntropy is not just a formula. It’s a mindset. A way of accepting that knowledge is never perfect, but it can be improved. When we train models with entropy in mind, we embrace the chaos—and turn it into clarity.\nReferences 🔗 https://medium.com/data-science/understanding-entropy-the-golden-measurement-of-machine-learning-4ea97c663dc3 🔗 https://huggingface.co/blog/hexgrad/g2p ","date":1743724800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743724800,"objectID":"f6191cb7c10d649e7c76bbe51ca65979","permalink":"https://leminhnguyen.github.io/post/machine-learning/entropy/","publishdate":"2025-04-04T00:00:00Z","relpermalink":"/post/machine-learning/entropy/","section":"post","summary":"Low vs High Entropy Entropy is a powerful and fundamental concept that quietly drives some of the most effective algorithms in machine learning. From decision trees to deep neural networks, entropy plays a central role in helping models navigate uncertainty and make better predictions.","tags":["machine learning","entropy","information theory","decision trees","neural networks"],"title":"Why Entropy Matters in Machine Learning?","type":"post"},{"authors":null,"categories":["Speech","Automatic Speech Recognition"],"content":" 1. Background \u0026amp; Motivation Automatic Speech Recognition (ASR) has made significant strides in recent years, particularly with the rise of large-scale multilingual models like OpenAI\u0026rsquo;s Whisper, Google USM, and Meta\u0026rsquo;s MMS. These models unlock possibilities for building speech recognition systems that support dozens — or even hundreds — of languages.\nHowever, building such multilingual ASR systems remains challenging due to:\nLanguage Interference: When multiple languages are trained in a shared model, performance may degrade due to data imbalance, dialectal accents, and language similarities. Catastrophic Forgetting: Fine-tuning a model on new languages often causes the model to forget previously learned languages, severely impacting recognition performance. 2. The Proposed Solution: LoRA-Whisper To tackle these two key challenges, researchers from Shanghai Jiao Tong University and Tencent AI Lab introduce LoRA-Whisper, a parameter-efficient and extensible multilingual ASR framework based on the Whisper model and Low-Rank Adaptation (LoRA).\nWhat is LoRA? LoRA (Low-Rank Adaptation) is a lightweight fine-tuning technique that freezes the original model weights and injects small, trainable low-rank matrices into certain layers (e.g., attention and feed-forward layers). This allows models to be efficiently adapted to new tasks or domains with minimal parameter overhead.\nHow LoRA-Whisper Works For each language, a language-specific LoRA module is attached to the Whisper model. The Whisper model remains frozen, serving as a shared backbone. When recognizing a language, only the corresponding LoRA module is activated during inference. This design prevents language interference and ensures knowledge preservation of all previously learned languages. Adding New Languages (Language Expansion) LoRA-Whisper offers two innovative methods for expanding the model with new languages without retraining the entire model:\nLoRA Warm Start: The LoRA module for a new language is initialized using the LoRA module of the most similar existing language (based on Whisper’s language ID probabilities). LoRA Mixture of Experts (MoE): The system dynamically selects and combines LoRA modules from multiple similar languages during training and inference to aid the new language’s learning. These methods significantly improve adaptation quality while avoiding catastrophic forgetting. 3. Experimental Results Experiments were conducted using MLS and FLEURS datasets across 8 languages. Highlights include:\nMultilingual ASR: LoRA-Whisper outperformed multilingual fine-tuning and came close to monolingual fine-tuning, using only ~5% of the trainable parameters. Language Expansion: Full fine-tuning with new languages caused up to 3× performance drop on existing languages. LoRA-Whisper maintained performance on existing languages while significantly improving WER (Word Error Rate) on new languages. LoRA warm start and LoRA MoE achieved 23% and 5% relative gains respectively over LoRA without similarity-based strategies. Ablation Study: Does Language Similarity Help? Yes. The authors demonstrated that initializing a new language\u0026rsquo;s LoRA from a similar language\u0026rsquo;s LoRA consistently led to better performance. In contrast, initializing from an unrelated language could hurt performance — even worse than training from scratch.\nLimitations \u0026amp; Future Work While LoRA-Whisper is scalable and efficient, one limitation is that model size increases linearly with the number of supported languages due to separate LoRA modules. Future directions include:\nSharing LoRA modules among similar languages. Extending the approach to low-resource and code-switching scenarios. Integrating more advanced expert routing techniques. 4. Conclusion LoRA-Whisper offers a compelling solution for building scalable, customizable, and language-resilient ASR systems. By combining Whisper’s robust multilingual backbone with the adaptability of LoRA, the paper demonstrates an effective way to expand and maintain large ASR systems without catastrophic forgetting or performance trade-offs. This work marks a step forward in enabling more inclusive, efficient, and modular speech recognition systems — critical for real-world multilingual applications.\n","date":1741996800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1741996800,"objectID":"cc801e7721d7b51689f724deea2559a4","permalink":"https://leminhnguyen.github.io/post/speech-research/lora-whisper/","publishdate":"2025-03-15T00:00:00Z","relpermalink":"/post/speech-research/lora-whisper/","section":"post","summary":"1. Background \u0026amp; Motivation Automatic Speech Recognition (ASR) has made significant strides in recent years, particularly with the rise of large-scale multilingual models like OpenAI\u0026rsquo;s Whisper, Google USM, and Meta\u0026rsquo;s MMS.","tags":["deep learning","automatic speech recognition","speech\""],"title":"LoRA-Whisper: A Scalable and Efficient Solution for Multilingual ASR","type":"post"},{"authors":null,"categories":["NLP","FlashAttention"],"content":" Understanding FlashAttention: Inner vs Outer Loop Optimization FlashAttention is a groundbreaking optimization technique for computing attention in Transformer models. It drastically improves performance by reducing memory bottlenecks and utilizing GPU memory more efficiently.\nFlashAttention: Fast and Memory-Efficient Exact Attention with IO-Awareness 🚀 What Problem Does It Solve? In traditional attention mechanisms:\nAttention matrices like Q, K, and V are huge. GPU cores (CUDA cores) must fetch data from HBM (High Bandwidth Memory) repeatedly. Each access to HBM is slow and inefficient. Shared memory (SRAM) exists but is not optimally used. This leads to frequent memory transfers, under-utilized cores, and slow inference time.\n⚡ FlashAttention to the Rescue FlashAttention solves this by:\nDividing Q, K, V matrices into smaller blocks (e.g., 32x32). Copying each block from HBM to SRAM once (not repeatedly). Performing all computations inside SRAM, near the GPU cores. Writing results back to HBM only once per block. This dramatically reduces memory access overhead and accelerates attention computations.\n🔁 Inner Loop vs Outer Loop Outer Loop Responsible for loading blocks of K/V from HBM to SRAM. Each iteration handles a large memory transfer. Runs infrequently but handles heavy data movement. Inner Loop Executes on the data already in SRAM. Performs matrix multiplications (Q×Kᵀ), softmax, and QK×V. Runs frequently but operates on fast-access memory. Fast and efficient — no further HBM access needed. 🧠 Analogy: Kitchen Example HBM = Warehouse far away. SRAM = Workbench in your kitchen. Outer loop = You bring a tray of ingredients from warehouse to your kitchen. Inner loop = You cook the full meal using what\u0026rsquo;s already on your workbench. Traditional attention = you run back to the warehouse for every spoon of spice 😅\nFlashAttention = bring the whole spice rack once, cook in peace! 👨‍🍳\n✅ Summary Feature Traditional Attention FlashAttention Memory Access Frequent HBM access One-time block transfer SRAM Usage Under-utilized Fully utilized per block Computation Location Mix of HBM and registers All in SRAM Speed Slower, memory bottleneck Much faster, memory-efficient FlashAttention is a key breakthrough for making large models faster and more scalable — especially during inference.\n","date":1738368000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1738368000,"objectID":"1b77e2e3f028b434bbe70d5d6a47d7ae","permalink":"https://leminhnguyen.github.io/post/nlp-research/flash-attention/","publishdate":"2025-02-01T00:00:00Z","relpermalink":"/post/nlp-research/flash-attention/","section":"post","summary":"Understanding FlashAttention: Inner vs Outer Loop Optimization FlashAttention is a groundbreaking optimization technique for computing attention in Transformer models. It drastically improves performance by reducing memory bottlenecks and utilizing GPU memory more efficiently.","tags":["deep learning","nlp","flash attention"],"title":"Understanding FlashAttention: Inner vs Outer Loop Optimization","type":"post"},{"authors":null,"categories":["NLP","Large Language Models"],"content":" Adversarial Attacks on Large Language Models (LLMs)\nAdversarial attacks on large language models (LLMs) involve manipulating inputs to deceive the model into generating harmful, biased, or incorrect outputs. These attacks exploit the vulnerabilities of LLMs, which rely on patterns in training data to generate responses. Below is an overview of key concepts, types of attacks, implications, and defense strategies.\nAn overview of threats to LLM-based applications (source: Lil\u0026rsquo;Log Blog) 1. Types of Adversarial Attacks on LLMs a. Evasion Attacks Description: Attackers modify input text (e.g., by altering words, punctuation, or structure) to trick the model into producing unintended outputs. Example: Adding a few words like \u0026ldquo;I am a helpful assistant\u0026rdquo; to a prompt to manipulate the model\u0026rsquo;s response. Impact: Can lead to misinformation, phishing, or generation of harmful content. b. Poisoning Attacks Description: Corrupting training data to influence the model\u0026rsquo;s behavior. Attackers inject malicious examples during training. Example: Including biased or harmful data in the training set to make the model generate toxic responses. Impact: Long-term degradation of model reliability and trustworthiness. c. Injection Attacks Description: Inserting malicious code or prompts into the input to alter the model\u0026rsquo;s execution flow. Example: Using adversarial prompts like \u0026ldquo;Generate a phishing email\u0026rdquo; to exploit the model\u0026rsquo;s tendency to follow instructions. Impact: Enables exploitation of model capabilities for malicious purposes. d. Data Poisoning Description: Similar to poisoning attacks but focuses on corrupting the training dataset to bias the model\u0026rsquo;s outputs. Example: Adding fake user interactions that encourage the model to generate harmful content. Impact: Systemic bias and ethical risks in model behavior. e. Model Inversion Attacks Description: Inferring sensitive information about the model\u0026rsquo;s training data by analyzing outputs. Example: Reverse-engineering the model to reveal private data or patterns in the training set. Impact: Privacy breaches and exposure of proprietary information. 2. Implications of Adversarial Attacks Security Risks: Phishing, misinformation, and malware generation via manipulated prompts. Ethical Concerns: Reinforcement of biases, hate speech, or harmful content. Trust Erosion: Users may lose confidence in LLMs for critical tasks like healthcare, finance, or legal advice. Operational Disruption: Attackers could disrupt services by causing models to fail or produce incorrect outputs. 3. Defense Mechanisms a. Adversarial Training Approach: Train models on adversarial examples to improve robustness. Example: Introduce perturbed inputs during training to make the model resistant to attacks. Limitation: Requires access to adversarial examples, which may be difficult to generate for LLMs. b. Input Sanitization Approach: Detect and filter malicious patterns in inputs (e.g., using regex or keyword matching). Example: Blocking suspicious prompts like \u0026ldquo;Generate a phishing email\u0026rdquo; or \u0026ldquo;I am a helpful assistant.\u0026rdquo; Limitation: May fail against sophisticated, subtle attacks. c. Model Ensembles Approach: Use multiple models to cross-validate outputs and detect inconsistencies. Example: If one model generates a harmful response, others may flag it as anomalous. Limitation: Increases computational overhead and complexity. d. Uncertainty Estimation Approach: Train models to estimate confidence in their outputs, flagging uncertain responses. Example: If the model is unsure about a prompt, it may refuse to generate a response. Limitation: Requires careful calibration and may reduce usability. e. Prompt Engineering Defenses Approach: Design prompts to resist adversarial manipulation (e.g., using multi-step reasoning or safety checks). Example: Incorporating safety constraints like \u0026ldquo;Avoid harmful content\u0026rdquo; into the prompt. Limitation: May not fully prevent attacks, especially if the adversary tailors prompts. 4. Research and Tools Key Papers:\n\u0026ldquo;Adversarial Examples for Neural Network Language Models\u0026rdquo; (Emti et al.) – Explores adversarial examples in NLP. \u0026ldquo;Prompt Injection Attacks on Language Models\u0026rdquo; (Zhang et al.) – Demonstrates how prompts can be weaponized. \u0026ldquo;Defending Against Prompt Injection Attacks\u0026rdquo; (Li et al.) – Proposes defenses against adversarial prompts. Tools:\nAdversarial Text Generation Tools: Generate adversarial examples for testing. Model Auditing Frameworks: Analyze model behavior for biases or vulnerabilities. 5. Challenges and Future Directions Dynamic Nature of Attacks: Adversaries continuously evolve techniques, requiring ongoing research. Balancing Safety and Usability: Defenses must avoid overly restrictive measures that hinder model functionality. Cross-Domain Collaboration: Combining insights from cybersecurity, NLP, and ethics to address risks holistically. Conclusion Adversarial attacks on LLMs pose significant risks to security, ethics, and trust. While defenses like adversarial training and input sanitization offer partial protection, the dynamic nature of these threats demands continuous innovation. Researchers and practitioners must prioritize robustness, transparency, and ethical considerations to ensure the safe deployment of LLMs in real-world applications.\n","date":1736553600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1736553600,"objectID":"3e76c5c2517688530ade7b63aca56672","permalink":"https://leminhnguyen.github.io/post/nlp-research/adversarial-attacks/","publishdate":"2025-01-11T00:00:00Z","relpermalink":"/post/nlp-research/adversarial-attacks/","section":"post","summary":"Adversarial Attacks on Large Language Models (LLMs)\nAdversarial attacks on large language models (LLMs) involve manipulating inputs to deceive the model into generating harmful, biased, or incorrect outputs. These attacks exploit the vulnerabilities of LLMs, which rely on patterns in training data to generate responses.","tags":["deep learning","llm","adversarial attacks"],"title":"Adversarial Attacks on Large Language Models (LLMs)","type":"post"},{"authors":null,"categories":["NLP","Named Entity Recognition","Deep Learning"],"content":" 1. What is Named Entity Recognition (NER)? Named Entity Recognition (NER) is a fundamental task in Natural Language Processing (NLP) that involves identifying and classifying spans of text that refer to real-world entities such as:\nPersons (e.g., \u0026ldquo;Albert Einstein\u0026rdquo;), Organizations (e.g., \u0026ldquo;United Nations\u0026rdquo;), Locations (e.g., \u0026ldquo;Paris\u0026rdquo;), Dates, Products, Diseases, and many more. Traditional NER systems are trained on a fixed set of entity types, which limits their adaptability to new domains or tasks. Recently, Open NER has emerged as a flexible paradigm that allows recognizing arbitrary entity types based on natural language instructions — a direction GLiNER directly embraces and enhances.\n2. Overview GLiNER is a compact and general-purpose model for Named Entity Recognition (NER) that leverages Bidirectional Transformers (like BERT or DeBERTa) to extract arbitrary types of entities from text — without being constrained to a fixed label set. Unlike traditional NER models or large language models (LLMs) like ChatGPT, GLiNER is lightweight, efficient, and designed for zero-shot generalization across domains and languages.\nTraditional NER systems are limited by a fixed ontology of entity types. While LLMs (e.g., GPT-3, ChatGPT) allow open-type NER via prompting, they are computationally expensive, slow (token-by-token decoding), and often impractical in production due to API cost and latency. GLiNER aims to:\nRetain the flexibility of LLMs in handling arbitrary entity types. Achieve high performance with orders of magnitude fewer parameters. Enable parallel extraction of entities rather than autoregressive generation. 3. Model Architecture GLiNER reframes NER as a semantic matching problem between entity types and text spans in a shared latent space. Input Format:\n[ENT] person [ENT] organization [ENT] location [SEP] Text... - `[ENT]`: special token preceding each entity type. - `[SEP]`: separates entity types from input text. Bidirectional Encoder: A BiLM (e.g., DeBERTa-v3) encodes both entity types and the input text.\nSpan Representation Module: Computes span embeddings from token representations using a feedforward network: \\[ S_{ij} = \\text{FFN}(h_i \\oplus h_j) \\]\nEntity Representation Module: Processes entity type embeddings via another FFN.\nMatching Layer: Calculates matching score: \\[ \\phi(i, j, t) = \\sigma(S_{ij}^T q_t) \\] where $\\sigma$ is the sigmoid function.\nTraining Strategy\nObjective: Binary cross-entropy loss over span/type pairs. Data Source: Trained on Pile-NER, a dataset derived from The Pile corpus with 44.8k passages and 13k entity types. Labels were generated by ChatGPT, acting as a teacher model (data-level distillation). Prompting ChatGPT for entity extraction in Pile-NER dataset Techniques for robustness: Negative sampling of entity types. Random shuffling and dropping of entity prompts. Span length cap (max 12 tokens) for efficiency. 4. Experimental Results For zero-shot evaluation, on 20 diverse NER benchmarks and out-of-domain (OOD) tasks, GLiNER-L (0.3B) outperforms: ChatGPT, InstructUIE (11B), UniNER (13B) and even GoLLIE (7B) in most cases.\nFor multilingual performance without multilingual training: GLiNER-Multi (mDeBERTa) surpasses ChatGPT on 8 out of 11 languages (e.g., Spanish, German, Russian). which shows strong generalization, even on unseen scripts.\nWith supervised fine-tuning, after fine-tuning on labeled datasets, GLiNER competes closely with or surpasses InstructUIE, performs nearly as well as UniNER (larger LLaMA-based model). Pretraining on Pile-NER improves data efficiency, especially with small datasets.\nEfficiency and Scalability\nGLiNER allows parallel inference for multiple entity types. Training Time: ~5 hours on a single A100 GPU for GLiNER-L. Parameter Sizes: 50M (S), 90M (M), 300M (L), compared to 7B–13B in baselines. 5. Ablation Insights Component Effect Negative sampling (50%) Best F1 balance Dropping entity types +1.4 F1 on OOD datasets deBERTa-v3 backbone Outperforms RoBERTa, BERT, ALBERT, ELECTRA Earlier NER approaches include rule-based systems, sequence labeling (e.g., BiLSTM-CRF), and span classification. LLM-based models (e.g., InstructUIE, UniNER) use instruction-tuning or generation. GLiNER offers a middle ground: lightweight yet capable of open-type NER. 6. Conclusion GLiNER is a generalist, scalable, and high-performing model for Named Entity Recognition that:\nBridges the gap between classic NER and large LLM-based models. Achieves state-of-the-art zero-shot results with minimal resources. Demonstrates robust multilingual and cross-domain generalization. This makes it an excellent candidate for real-world NER applications in low-resource, high-efficiency environments.\n🔗 Code: https://github.com/urchade/GLiNER\n📄 Paper: Urchade Zaratiana et al., GLiNER: Generalist Model for Named Entity Recognition using Bidirectional Transformer, arXiv:2311.08526\n","date":1730505600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1730505600,"objectID":"e1aa4542fbfcff8a0c0063906e9e6f41","permalink":"https://leminhnguyen.github.io/post/nlp-research/gliner/","publishdate":"2024-11-02T00:00:00Z","relpermalink":"/post/nlp-research/gliner/","section":"post","summary":"1. What is Named Entity Recognition (NER)? Named Entity Recognition (NER) is a fundamental task in Natural Language Processing (NLP) that involves identifying and classifying spans of text that refer to real-world entities such as:","tags":["GLiNER","BERT","NER","LLM","zero-shot","distillation"],"title":"GLiNER: A Generalist Model for Named Entity Recognition using Bidirectional Transformers","type":"post"},{"authors":null,"categories":["Linux","OS","Python"],"content":" In my day-to-day work with Linux systems and development environments, I've collected a variety of useful command-line snippets and troubleshooting notes. This blog post shares some of my favorites from counting files to fixing display issues designed to boost your productivity and make your life easier. 1. Quickly Count Files in a Folder fcount() { ls -1q \u0026quot;$1\u0026quot; | wc -l; } Example:\nfcount /home/nguyenlm/folder → 27\n2. Force Fix Broken CUDA Installation sudo apt-get -o Dpkg::Options::=\u0026quot;--force-overwrite\u0026quot; install --fix-broken 3. Count Non-Blank Lines in a File nbl-count() { grep -cve '^\\s*$' \u0026quot;$1\u0026quot;; } Example:\nnbl-count file.txt → 10\n4. Run Docker Without Sudo sudo chmod 666 /var/run/docker.sock ⚠️ Warning: This gives broad access to Docker socket. In production, add user to docker group instead.\n5. Fix Second Monitor Detection in Ubuntu sudo apt-get purge 'nvidia*' sudo add-apt-repository ppa:graphics-drivers sudo apt-get update sudo ubuntu-drivers autoinstall 6. Fix \u0026ldquo;Invalid MIT-MAGIC-COOKIE-1\u0026rdquo; Error (JavaFX Display Issue) First, check your active DISPLAY:\nwho # Example: user :1 2017-10-12 21:58 (:1) Set the correct environment:\nexport DISPLAY=:1.0 zenity --info --text \u0026quot;foobar\u0026quot; Tip: Check .bashrc, .zshrc, /etc/environment, or desktop environment configs.\nReference: Arch Linux Forum\n7. Check Folder Size Quickly sizeof() { du -h --max-depth=0 \u0026quot;$1\u0026quot; } Example:\nsizeof BOOK → 895M BOOK/\n8. Sync Files from Local to Remote Using Rsync rsync -aPz -e \u0026quot;ssh -p port\u0026quot; local_folder/ user@remote_host:remote_folder Tip: Add -n for dry-run to preview changes.\nReference: Rsync Command in Linux - Linuxize\n9. Find and Kill Specific Processes kill $(ps aux | grep '[p]rocess.py' | awk '{print $2}') [p] prevents the grep command from appearing in the process list.\n10. Recover a Lost Tmux Session pkill -USR1 tmux Final Thoughts These snippets have saved me countless hours when working with Linux environments, machine learning servers, and production systems. Feel free to bookmark or adapt them to fit your own workflow! ⚡\n","date":1716897600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1716897600,"objectID":"e2fd8fce4f74ae03373387704ee60b5a","permalink":"https://leminhnguyen.github.io/post/linux-learns/helpful-commands/","publishdate":"2024-05-28T12:00:00Z","relpermalink":"/post/linux-learns/helpful-commands/","section":"post","summary":"A curated collection of bash functions, troubleshooting commands, and performance tweaks that I often use in my daily workflow.","tags":["bash","linux","cli-tools","tips","automation"],"title":"Handy Bash Snippets and Linux Tips","type":"post"},{"authors":["Minh Nguyen Le"],"categories":["Speech","speech-synthesis","voice-conversion"],"content":"Overview This thesis develops a voice conversion model for Vietnamese based on the Phoneme Hallucinator model with 2 adoptions: (1) Add a Text2SSL module to get more context information before performing the KNN algorithm, (2) To create a more\rdiverse dataset we apply spectrogram-resize (SR) based data augmentation idea from Free-VC model which distorts speaker information without changing content information to generate more ”speakers”.\rThe proposal model Comparing different methods\rThis section compares the baseline and the proposal model.\nSource\rTarget\rBaseline Model\rProposal Model\r[trangntt] Female to Female Conversion [trangntt] Male to Female Conversion [nguyenlm] Male to Male Conversion [nguyenlm] Female to Male Conversion [thanhpv] Male to Male Conversion [thanhpv] Female to Male Conversion ","date":1709982077,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1709982077,"objectID":"c90884976982d14e3e212a18b0d1f39e","permalink":"https://leminhnguyen.github.io/post/speech-research/voice-conversion/voice-conversion-10-04-2024/","publishdate":"2024-03-09T11:01:17.461Z","relpermalink":"/post/speech-research/voice-conversion/voice-conversion-10-04-2024/","section":"post","summary":"Overview This thesis develops a voice conversion model for Vietnamese based on the Phoneme Hallucinator model with 2 adoptions: (1) Add a Text2SSL module to get more context information before performing the KNN algorithm, (2) To create a more\rdiverse dataset we apply spectrogram-resize (SR) based data augmentation idea from Free-VC model which distorts speaker information without changing content information to generate more ”speakers”.","tags":["speech-synthesis","voice-conversion"],"title":"Vietnamese Voice Conversion","type":"post"},{"authors":["Minh Nguyen Le"],"categories":["NLP","TTS"],"content":"💣 Batch vs Layer Normalization The purpose of normalization is to provide an uniform scale for the input data to avoid varing in huge range. The normalization method ensures there is no loss of information and even the range of values isn't affected. In spite of normalizing the input data, the value of activations of certain neurons in the hidden layers can start varying across a wide scale during the training process. This means the input to the neurons to the next hidden layer will also range across the wide range, bringing instability.\rBatch Normalization Layer is applied for neural networks where the training is done in mini-batches. We divide the data into batches with a certain batch size and then pass it through the network. Batch normalization is applied on the neuron activation for all the samples in the mini-batch such that the mean of output lies close to 0 and the standard deviation lies close to 1. It also introduces two learning parameters gama and beta in its calculation which are all optimized during training. 1\nLayer Normalization which addresses the drawbacks of batch normalization. This technique is not dependent on batches and the normalization is applied on the neuron for a single instance across all features. Here also mean activation remains close to 0 and mean standard deviation remains close to 1. 1\nThe key difference Batch Normalization depends on mini-batch size and may not work properly for smaller batch sizes. On the other hand, Layer normalization does not depend on mini-batch size. In batch normalization, input values of the same neuron for all the data in the mini-batch are normalized. Whereas in layer normalization, input values for all neurons in the same layer are normalized for each data sample. Batch normalization works better with fully connected layers and convolutional neural network (CNN) but it shows poor results with recurrent neural network (RNN). On the other hand, the main advantage of Layer normalization is that it works really well with RNN. Batch-vs-Layer-Normalization\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":1646823677,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1661427759,"objectID":"f67dcb0badec4931a2fc04390ea9e37f","permalink":"https://leminhnguyen.github.io/post/speech-research/tts-learns/tts-learns/","publishdate":"2022-03-09T11:01:17.461Z","relpermalink":"/post/speech-research/tts-learns/tts-learns/","section":"post","summary":"The purpose of this post is just to understand the key difference between two types of well-known normalization techniques.","tags":["tts","learning"],"title":"Comparing batch vs layer normalization","type":"post"},{"authors":["Minh Nguyen Le"],"categories":["Linux","OS","Python"],"content":"Overview One day, I\u0026rsquo;ve tried to run a python script using multiprocessing technique n_jobs=10 and for a while the program crashed and raised the [Errno 32] Broken pipe error. With some google searches I founded the problem as well the solution for it.\n\u0026ldquo;Broken pipe\u0026rdquo; is essentially an IOError error (short for input/output error), which happened at the Linux system level. It usually occurs when reading and writing files, or in other words, doing file input/output or network input/output (via sockets) 1.\nIn programs that uses worker processes to speed up processing and make use of multi-core CPUs, you can try reducing the number of the worker processes to see whether the error disappear or not 1.\nFrom that suggestion, I reduced n_jobs=10 to n_jobs=5 and boom, the error got disappeared.\n[Errno 32] Broken pipe in Python\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":1646823677,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1656586878,"objectID":"38e8c5acfe7df1223121de21fc9bc302","permalink":"https://leminhnguyen.github.io/post/linux-learns/broken-pipe-error/","publishdate":"2022-03-09T11:01:17.461Z","relpermalink":"/post/linux-learns/broken-pipe-error/","section":"post","summary":"One day, I’ve tried to run a python script using the multiprocessing technique and for a while the program crashed and raised the [Errno 32] Broken pipe error...","tags":["tts","learning"],"title":"Fix \"[Errno 32] Broken pipe\" in Python","type":"post"},{"authors":["Minh Nguyen Le"],"categories":["Linux","OS"],"content":"Overview What is a zombie process? As you know, in Linux OS when we start an application the OS will create a process and this process can start other processes. The process starts other processes is refered as the parent and the new processes are refered as the children. The Linux OS keeps the information of processes in a table called the process table. The parent and the children run almost independently, but sometimes they share some resources (input, output) or contexts. When a child finished its job, it will send a SIGCHLD signal to the parent. The parent then reads the exit code of the child and removes its entry from the process table, this also cleans the resources used by the child. But there are sometimes the children cannot send the SIGCHLD signal to the parent or the parent was died by incident, in such cases the children outlive from their parent and the Linux OS refers them as orphaned or zombie processes.\nThe problem of zombie processes Because of outliving the parent, the resources used by the children (zombie) cannot be released, and hence, other processes cannot use these resources. To overcome this problem, we need to kill the children manually based on their ids. But, the main question is how we can find the the ids of the children? To answer that question, let\u0026rsquo;s continue to the next sections.\nKilling zombie processes using GPU Working as a research engineer, I\u0026rsquo;m usually using GPUs to train the deep learning models and checking the used resources with nvtop command. Usually each process using GPU will has an entry in the nvtop table and the Linux kernel refers that process as the parent process, the entry consists of some information about that process, for example, PID - the parent id, USER - the user that the parent belongs to, GPU - the GPU id used by the parent\u0026hellip; To kill a process using GPU we simply use the command kill PID or kill -9 PID, but there are some cases we cannot kill the process by that way, for example, the process has PID=18309 in the figure1. This because the process (parent) is already dead (indicated by N/A USER column) but the children (orphaned) are still alive and hold the resouces (in this case, the zombie proceses are holding about 85% GPU MEM). In order to access the child processes you have to excute sudo fuser -v /dev/nvidia* and all processes using GPUs will be listed with each GPU id. For example, when running the sudo fuser -v /dev/nvidia* command on my training server we will see the output looks like:\n$ sudo fuser -v /dev/nvidia*\rUSER PID ACCESS COMMAND\r/dev/nvidia0: nguyenlm 15909 F.... nvtop\rnguyenlm 20717 F.... nvtop\rnguyenlm 21042 F.... nvtop\rroot 24536 F.... nvtop\rnguyenlm 24787 F...m tensorboard\rnguyenlm 25078 F...m python\rnguyenlm 25079 F...m python\rnguyenlm 25080 F...m python\rnguyenlm 25081 F...m python\rnguyenlm 25082 F...m python\rnguyenlm 25085 F...m python\rnguyenlm 32199 F...m python\rFrom the output, we have a dozen of processes using GPU=0 (python, nvtop, tensorboard). Simply, we can kill them all with their PIDs by the kill command as mentioned to release the resources. However, we can do that easier by an observation, the zombie processes are usually have consecutive ids, so if we look the output carefully we will see a group of processes has the id ranged from 25078 to 25082 and those actually are zombie PIDs.\nReferences: Kill zombie process using GPU memory The subprocess Module: Wrapping Programs With Python ","date":1646823677,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1656586541,"objectID":"3e01837e6b4ce96f8b12fbae1f4afe93","permalink":"https://leminhnguyen.github.io/post/linux-learns/kill-zombie-processes/","publishdate":"2022-03-09T11:01:17.461Z","relpermalink":"/post/linux-learns/kill-zombie-processes/","section":"post","summary":"The trick for killing zombie processes using GPU in Linux 😃.","tags":["tts","learning"],"title":"How to kill zombie processes using GPU ?","type":"post"},{"authors":["Minh Nguyen Le"],"categories":["speech-synthesis","voice-conversion"],"content":"Overview Comparing different methods\rThis section compares Phoneme Hallucinator kNN-VC and Phoneme Hallucinator.\nSource\rTarget\rkNN-VC\rPhoneme Hallucinator\r","date":1646823677,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1661426940,"objectID":"25d647f17f0e05b51898fd0fb33d69c4","permalink":"https://leminhnguyen.github.io/post/speech-research/voice-conversion/voice-conversion-09-03-2024/","publishdate":"2022-03-09T11:01:17.461Z","relpermalink":"/post/speech-research/voice-conversion/voice-conversion-09-03-2024/","section":"post","summary":"Overview Comparing different methods\rThis section compares Phoneme Hallucinator kNN-VC and Phoneme Hallucinator.\nSource\rTarget\rkNN-VC\rPhoneme Hallucinator\r","tags":["speech-synthesis","voice-conversion"],"title":"KNN-VC vs Phoneme Hallucinator [09/03/2024] ?","type":"post"},{"authors":["Minh Nguyen Le"],"categories":["speech-synthesis","voice-conversion"],"content":"Overview Comparing different methods\rThis section compares Phoneme Hallucinator kNN-VC and Phoneme Hallucinator.\nSource\rTarget\rPhoneme Hallucinator\rPhoneme Hallucinator + Text2SSL\r","date":1646823677,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646823677,"objectID":"ef4585f81ade6a8cf25a0da4503ae6fa","permalink":"https://leminhnguyen.github.io/post/speech-research/voice-conversion/voice-conversion-23-03-2024/","publishdate":"2022-03-09T11:01:17.461Z","relpermalink":"/post/speech-research/voice-conversion/voice-conversion-23-03-2024/","section":"post","summary":"Overview Comparing different methods\rThis section compares Phoneme Hallucinator kNN-VC and Phoneme Hallucinator.\nSource\rTarget\rPhoneme Hallucinator\rPhoneme Hallucinator + Text2SSL\r","tags":["speech-synthesis","voice-conversion"],"title":"KNN-VC vs Phoneme Hallucinator [23/03/2024] ?","type":"post"},{"authors":["Minh Nguyen Le"],"categories":["Speech","TTS"],"content":"💣 Postnet Layer In some end-to-end TTS models today, after the hidden representations are passed through the decoder we got the mel-spectrogram which contains the predictions of the acoustic features. Finally, the decoder predictions are passed over the Postnet layer which predicts residual information to improve the construction performance of the model . The section below notes some insights about the Postnet layer by me when learning TTS.\r1. https://arxiv.org/pdf/1908.11535.pdf - 30 Aug 2019\rIn addition to the decoder, some systems have a post-net, an additional network that predicts acoustic features. A post-net was originally introduced to convert acoustic features to different acoustic features that were suitable for an adopted waveform synthesis method, for example, from mel spectrograms to linear spectrograms [2] or mel spectrograms to vocoder parameters [4]. In recent studies the role of the post-net was to improve the acoustic features predicted by the decoder to improve quality further [5, 6]. The post-net introduces an additional loss term in the objective function.\n2. https://arxiv.org/pdf/2008.03388.pdf - 11 Aug 2020\rRelative to DAR, C-DAR has three additional changes that do not significantly impact naturalness or controllability, but provide additional insights into F0 generation. First, a 5-layer postnet [3] follows the autoregressive RNN. We find that this postnet has the effect of reducing autoregressive sampling errors and tightening the posterior distribution around the argmax (Figure 2)\n","date":1646823677,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1661427689,"objectID":"6702df889c6194578de564e5fd6ed54e","permalink":"https://leminhnguyen.github.io/post/speech-research/tts-learns/postnet-layer/","publishdate":"2022-03-09T11:01:17.461Z","relpermalink":"/post/speech-research/tts-learns/postnet-layer/","section":"post","summary":"Generally speaking, the postnet layer receives a mel-spectrogram and predicts another mel-spectrogram with additional information. That makes the output mel-spectrogram more detail, and hence improves the quality of synthesis audio.","tags":["tts","learning"],"title":"Postnet Layer","type":"post"},{"authors":["Minh Nguyen Le"],"categories":null,"content":"","date":1642500575,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642500575,"objectID":"9413fdc7864cdaa721d77e5a988790ce","permalink":"https://leminhnguyen.github.io/publication/talk-unittesting-for-data-science/","publishdate":"2022-01-18T10:09:35.067Z","relpermalink":"/publication/talk-unittesting-for-data-science/","section":"publication","summary":"This talk give you some ideals about the purpose of unittest? how to write good unittest? how to use pytest framework? and show you the basic unittest structure for your project.","tags":null,"title":"Talk: Unittesting for Data Science","type":"publication"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://leminhnguyen.github.io/about/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/about/","section":"","summary":"","tags":null,"title":"","type":"widget_page"}]