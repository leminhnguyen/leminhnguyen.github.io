<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>speech&#34; | leminhnguyen&#39;s blog</title>
    <link>https://leminhnguyen.github.io/tag/speech/</link>
      <atom:link href="https://leminhnguyen.github.io/tag/speech/index.xml" rel="self" type="application/rss+xml" />
    <description>speech&#34;</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© {2025} leminhnguyen</copyright><lastBuildDate>Mon, 28 Apr 2025 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://leminhnguyen.github.io/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>speech&#34;</title>
      <link>https://leminhnguyen.github.io/tag/speech/</link>
    </image>
    
    <item>
      <title>LoRA-Whisper: A Scalable and Efficient Solution for Multilingual ASR</title>
      <link>https://leminhnguyen.github.io/post/speech-research/lora-whisper/</link>
      <pubDate>Mon, 28 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://leminhnguyen.github.io/post/speech-research/lora-whisper/</guid>
      <description>&lt;div style=&#34;text-align: justify; font-size: 15px; margin-top: 20px&#34;&gt;
&lt;h2 id=&#34;1-background--motivation&#34;&gt;&lt;strong&gt;1. Background &amp;amp; Motivation&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Automatic Speech Recognition (ASR) has made significant strides in recent years, particularly with the rise of large-scale multilingual models like OpenAI&amp;rsquo;s Whisper, Google USM, and Meta&amp;rsquo;s MMS. These models unlock possibilities for building speech recognition systems that support dozens — or even hundreds — of languages.&lt;br&gt;
However, building such multilingual ASR systems remains challenging due to:&lt;/p&gt;
&lt;div style=&#34;text-align: justify; font-size: 15px; margin-top: -15px&#34;&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Language Interference&lt;/strong&gt;: When multiple languages are trained in a shared model, performance may degrade due to data imbalance, dialectal accents, and language similarities.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Catastrophic Forgetting&lt;/strong&gt;: Fine-tuning a model on new languages often causes the model to forget previously learned languages, severely impacting recognition performance.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h2 id=&#34;2-the-proposed-solution-lora-whisper&#34;&gt;&lt;strong&gt;2. The Proposed Solution: LoRA-Whisper&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;To tackle these two key challenges, researchers from Shanghai Jiao Tong University and Tencent AI Lab introduce &lt;a href=&#34;https://arxiv.org/pdf/2406.06619&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;LoRA-Whisper&lt;/strong&gt;&lt;/a&gt;, a parameter-efficient and extensible multilingual ASR framework based on the Whisper model and &lt;strong&gt;Low-Rank Adaptation (LoRA)&lt;/strong&gt;.&lt;/p&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/speech-research/lora-whisper/LoRA%20warm%20start%20and%20MoE_hu6fbb7d968e144fe5cedba710fb29a1f0_142765_4a9bda5537472758efffb93aa1a9bd94.png 400w,
               /post/speech-research/lora-whisper/LoRA%20warm%20start%20and%20MoE_hu6fbb7d968e144fe5cedba710fb29a1f0_142765_ee9b2c2b586140e39f7e0fc69ebab6c6.png 760w,
               /post/speech-research/lora-whisper/LoRA%20warm%20start%20and%20MoE_hu6fbb7d968e144fe5cedba710fb29a1f0_142765_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://leminhnguyen.github.io/post/speech-research/lora-whisper/LoRA%20warm%20start%20and%20MoE_hu6fbb7d968e144fe5cedba710fb29a1f0_142765_4a9bda5537472758efffb93aa1a9bd94.png&#34;
               width=&#34;760&#34;
               height=&#34;446&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;what-is-lora&#34;&gt;&lt;strong&gt;What is LoRA?&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;LoRA&lt;/strong&gt; (Low-Rank Adaptation) is a lightweight fine-tuning technique that freezes the original model weights and injects small, trainable low-rank matrices into certain layers (e.g., attention and feed-forward layers). This allows models to be efficiently adapted to new tasks or domains with minimal parameter overhead.&lt;/p&gt;
&lt;h4 id=&#34;how-lora-whisper-works&#34;&gt;How LoRA-Whisper Works&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;For each language, a &lt;strong&gt;language-specific LoRA module&lt;/strong&gt; is attached to the Whisper model.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Whisper model remains frozen&lt;/strong&gt;, serving as a shared backbone.&lt;/li&gt;
&lt;li&gt;When recognizing a language, only the corresponding LoRA module is activated during inference.&lt;/li&gt;
&lt;li&gt;This design prevents language interference and ensures knowledge preservation of all previously learned languages.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;adding-new-languages-language-expansion&#34;&gt;Adding New Languages (Language Expansion)&lt;/h4&gt;
&lt;p&gt;LoRA-Whisper offers two innovative methods for expanding the model with new languages without retraining the entire model:&lt;/p&gt;
&lt;div style=&#34;text-align: justify; font-size: 15px; margin-top: -15px; margin-bottom: -15px&#34;&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;LoRA Warm Start&lt;/strong&gt;: The LoRA module for a new language is initialized using the LoRA module of the most similar existing language (based on Whisper’s language ID probabilities).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LoRA Mixture of Experts (MoE)&lt;/strong&gt;: The system dynamically selects and combines LoRA modules from multiple similar languages during training and inference to aid the new language’s learning.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
These methods significantly improve adaptation quality while avoiding catastrophic forgetting.
&lt;h2 id=&#34;3-experimental-results&#34;&gt;&lt;strong&gt;3. Experimental Results&lt;/strong&gt;&lt;/h2&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/speech-research/lora-whisper/lora_whisper_results_hu76a423228b00eeb3d77b99a44969647a_162684_8b58205bdaada31faf668f6735a58c0e.png 400w,
               /post/speech-research/lora-whisper/lora_whisper_results_hu76a423228b00eeb3d77b99a44969647a_162684_e87846e488630ab835c83f67ee08ef77.png 760w,
               /post/speech-research/lora-whisper/lora_whisper_results_hu76a423228b00eeb3d77b99a44969647a_162684_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://leminhnguyen.github.io/post/speech-research/lora-whisper/lora_whisper_results_hu76a423228b00eeb3d77b99a44969647a_162684_8b58205bdaada31faf668f6735a58c0e.png&#34;
               width=&#34;760&#34;
               height=&#34;424&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;Experiments were conducted using MLS and FLEURS datasets across 8 languages. Highlights include:&lt;/p&gt;
&lt;div style=&#34;text-align: justify; font-size: 15px; margin-top: -15px; margin-bottom: 0px&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Multilingual ASR&lt;/strong&gt;: LoRA-Whisper outperformed multilingual fine-tuning and came close to monolingual fine-tuning, using only ~5% of the trainable parameters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Language Expansion&lt;/strong&gt;: Full fine-tuning with new languages caused up to 3× performance drop on existing languages. LoRA-Whisper maintained performance on existing languages while significantly improving WER (Word Error Rate) on new languages. LoRA warm start and LoRA MoE achieved 23% and 5% relative gains respectively over LoRA without similarity-based strategies.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h4 id=&#34;ablation-study-does-language-similarity-help&#34;&gt;Ablation Study: Does Language Similarity Help?&lt;/h4&gt;
&lt;p&gt;Yes. The authors demonstrated that initializing a new language&amp;rsquo;s LoRA from a similar language&amp;rsquo;s LoRA consistently led to better performance. In contrast, initializing from an unrelated language could hurt performance — even worse than training from scratch.&lt;/p&gt;
&lt;h4 id=&#34;limitations--future-work&#34;&gt;Limitations &amp;amp; Future Work&lt;/h4&gt;
&lt;p&gt;While LoRA-Whisper is scalable and efficient, one limitation is that model size increases linearly with the number of supported languages due to separate LoRA modules. Future directions include:&lt;/p&gt;
&lt;div style=&#34;text-align: justify; font-size: 15px; margin-top: -15px; margin-bottom: 0px&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Sharing LoRA modules among similar languages.&lt;/li&gt;
&lt;li&gt;Extending the approach to low-resource and code-switching scenarios.&lt;/li&gt;
&lt;li&gt;Integrating more advanced expert routing techniques.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;4-conclusion&#34;&gt;&lt;strong&gt;4. Conclusion&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;LoRA-Whisper&lt;/strong&gt; offers a compelling solution for building scalable, customizable, and language-resilient ASR systems. By combining Whisper’s robust multilingual backbone with the adaptability of LoRA, the paper demonstrates an effective way to expand and maintain large ASR systems without catastrophic forgetting or performance trade-offs. This work marks a step forward in enabling more inclusive, efficient, and modular speech recognition systems — critical for real-world multilingual applications.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Speaker Diarization: From Traditional Methods to the Modern Models</title>
      <link>https://leminhnguyen.github.io/post/speech-research/speaker-diarization/</link>
      <pubDate>Mon, 28 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://leminhnguyen.github.io/post/speech-research/speaker-diarization/</guid>
      <description>&lt;div style=&#34;text-align: justify; font-size: 15px; margin-top: 20px&#34;&gt;
Speaker Diarization, the task of answering &lt;code&gt;“Who spoken when?”&lt;/code&gt; - is an crucial component in many speech processing systems. From meeting transcription to customer service call analysis, diarization allows to segment signal by speakers, making down-stream tasks like speech-to-text, emotion analysis, or intent identification much more effective. The figure 1 below shows the speaker diarization results from my developed model on a youtube audio.














&lt;figure  id=&#34;figure-fig-1-the-diarization-results-from-my-developed-model&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Fig 1: The diarization results from my developed model&#34; srcset=&#34;
               /post/speech-research/speaker-diarization/speaker_diarization_voicelanding_hu28a540502b6e220f67c6fa946091d3da_64895_ab611148729afd5bb6b2b44ff298383d.png 400w,
               /post/speech-research/speaker-diarization/speaker_diarization_voicelanding_hu28a540502b6e220f67c6fa946091d3da_64895_a1eab91924d3a385687f1ed0b6749f9d.png 760w,
               /post/speech-research/speaker-diarization/speaker_diarization_voicelanding_hu28a540502b6e220f67c6fa946091d3da_64895_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://leminhnguyen.github.io/post/speech-research/speaker-diarization/speaker_diarization_voicelanding_hu28a540502b6e220f67c6fa946091d3da_64895_ab611148729afd5bb6b2b44ff298383d.png&#34;
               width=&#34;760&#34;
               height=&#34;371&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Fig 1: The diarization results from my developed model
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;div style=&#34;text-align: justify; font-size: 15px; margin-top: 10px&#34;&gt;
In this blog, I’ll introduce the core concepts of speaker diarization, discover both traditional and end-to-end methods, and highligth one of the latest innovations in the field: Sortformer model. Whether you’re just getting started or looking to catch up recent innovations, this blog aims give you a comprehensive overview. 
&lt;/div&gt;
&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Traditional Methods&lt;/li&gt;
&lt;li&gt;End-to-End Models&lt;/li&gt;
&lt;li&gt;New Breakthroughs in Diarization&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-traditional-methods&#34;&gt;1. Traditional Methods&lt;/h3&gt;
&lt;p&gt;













&lt;figure  id=&#34;figure-fig-2-traditional-speaker-diarization-pipeline&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Fig 2: Traditional Speaker Diarization Pipeline&#34; srcset=&#34;
               /post/speech-research/speaker-diarization/traditional_diar_hua7f002cd508fa95ba83464a48feb282c_171994_9bd4912a2e36e703ab217f84e7f104a5.png 400w,
               /post/speech-research/speaker-diarization/traditional_diar_hua7f002cd508fa95ba83464a48feb282c_171994_59370a29b144f19cf032b93530b94476.png 760w,
               /post/speech-research/speaker-diarization/traditional_diar_hua7f002cd508fa95ba83464a48feb282c_171994_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://leminhnguyen.github.io/post/speech-research/speaker-diarization/traditional_diar_hua7f002cd508fa95ba83464a48feb282c_171994_9bd4912a2e36e703ab217f84e7f104a5.png&#34;
               width=&#34;760&#34;
               height=&#34;343&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Fig 2: Traditional Speaker Diarization Pipeline
    &lt;/figcaption&gt;&lt;/figure&gt;
Traditional diarization systems often rely on modular pipelines, combining speaker embeddings (like i-vectors) with clustering algorithms such as Agglomerative Hierarchical Clustering (AHC). While effective, these systems require careful tuning and may struggle with overlapping speech. Those consist of many independent submodules that are optimized individually, namely being:&lt;/p&gt;
&lt;div style=&#34;text-align: justify; font-size: 15px; margin-top: -10px&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Speech Detection and Segmentation:&lt;/strong&gt; This step detects which regions of the audio contain speech and which are silent or contain noise, then splits the speech into chunks. It usually uses energy-based thresholds, voice activity detectors (VAD), or neural classifiers to separate speech from non-speech regions. Accurate VAD is critical because missed speech or false positives directly affect downstream segmentation and labeling. One of the most popular VAD algorithms is WebRTC VAD, which uses a combination of energy and spectral features to detect speech.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Speech Embedding:&lt;/strong&gt; A neural network pre-trained on speaker recognition is used to derive a high-level representation of the speech segments. Those embeddings are vector representations that summarize the voice characteristics (a.k.a voice print). Early systems used MFCC (Mel-frequency cepstral coefficients), but more modern pipelines use i-vectors or x-vectors, which are compact representations capturing speaker identity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Speaker Clustering:&lt;/strong&gt; After extracting segment embeddings, we need to cluster the speech embeddings with a clustering algorithm (for example K-Means or spectral clustering). The clustering produces our desired diarization results, which consists of identifying the number of unique speakers (derived from the number of unique clusters) and assigning a speaker label to each embedding (or speech segment).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;2-end-to-end-method&#34;&gt;2. End To End Method&lt;/h3&gt;
&lt;p&gt;End-to-end (E2E) diarization models aim to integrate the entire diarization process into a single neural network architecture, reducing the need for modular tuning and improving generalization. It usually inclues core crchitecture features such as:&lt;/p&gt;
&lt;div style=&#34;text-align: justify; font-size: 15px; margin-top: -20px&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Joint Learning: E2E models are trained to jointly optimize speech segmentation, speaker embedding extraction, and speaker assignment within one framework.&lt;/li&gt;
&lt;li&gt;Neural Encoders: Use convolutional neural networks (CNNs), recurrent neural networks (RNNs), or transformers to extract rich time-series representations from audio inputs.&lt;/li&gt;
&lt;li&gt;Attention Mechanisms: Incorporate self-attention layers to capture long-range dependencies across audio sequences, which is especially useful in handling speaker changes and overlapping speech.&lt;/li&gt;
&lt;li&gt;Loss Functions: Design specialized loss functions (e.g., permutation-invariant training) that help the model learn speaker assignments without being confused by label permutations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.1 Pyannote Audio&lt;/strong&gt;














&lt;figure  id=&#34;figure-fig-3-pyannote-audio-framework&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Fig 3: Pyannote Audio Framework&#34; srcset=&#34;
               /post/speech-research/speaker-diarization/pyannote_audio_pipeline_hu397e532eafa394da5f18400726a029a2_95311_bfcefe4f6bd63bec1b1ca774d5672d01.jpg 400w,
               /post/speech-research/speaker-diarization/pyannote_audio_pipeline_hu397e532eafa394da5f18400726a029a2_95311_debe6adaba4f91716017823d1d736632.jpg 760w,
               /post/speech-research/speaker-diarization/pyannote_audio_pipeline_hu397e532eafa394da5f18400726a029a2_95311_1200x1200_fit_q75_lanczos.jpg 1200w&#34;
               src=&#34;https://leminhnguyen.github.io/post/speech-research/speaker-diarization/pyannote_audio_pipeline_hu397e532eafa394da5f18400726a029a2_95311_bfcefe4f6bd63bec1b1ca774d5672d01.jpg&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Fig 3: Pyannote Audio Framework
    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2 Multi-Scale Diarization Nemo&lt;/strong&gt;
&lt;br&gt;
Speaker diarization faces a trade-off between accurately capturing speaker traits (which needs long audio segments) and achieving fine temporal resolution (which requires short segments). Traditional single-scale methods balance these but still leave gaps in accuracy, especially for short speaker turns common in conversation. To address this, a multi-scale approach is proposed, where speaker features are extracted at multiple segment lengths and combined using a multi-scale diarization decoder (MSDD). MSDD dynamically assigns weights to each scale using a CNN-based mechanism, improving diarization accuracy by balancing temporal precision and speaker representation quality.














&lt;figure  id=&#34;figure-fig-4-multi-scale-diarization-from-nemo&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Fig 4: Multi-Scale Diarization from Nemo&#34; srcset=&#34;
               /post/speech-research/speaker-diarization/nemo_unispeech_pipeline_hue6ea386f8be205e2031329979c69f704_676196_bbaec566d3120964c9f68e69f9945a3a.png 400w,
               /post/speech-research/speaker-diarization/nemo_unispeech_pipeline_hue6ea386f8be205e2031329979c69f704_676196_9ff8823fe4969344afa59efc019f539c.png 760w,
               /post/speech-research/speaker-diarization/nemo_unispeech_pipeline_hue6ea386f8be205e2031329979c69f704_676196_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://leminhnguyen.github.io/post/speech-research/speaker-diarization/nemo_unispeech_pipeline_hue6ea386f8be205e2031329979c69f704_676196_bbaec566d3120964c9f68e69f9945a3a.png&#34;
               width=&#34;760&#34;
               height=&#34;405&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Fig 4: Multi-Scale Diarization from Nemo
    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;what-problem-does-sort-loss-solve&#34;&gt;What Problem Does Sort Loss Solve?&lt;/h3&gt;
&lt;p&gt;Speaker diarization models predict &lt;strong&gt;who&lt;/strong&gt; is speaking at &lt;strong&gt;each frame&lt;/strong&gt; of audio. But — &lt;strong&gt;the model doesn&amp;rsquo;t know speaker identities&lt;/strong&gt;! It only uses generic speaker labels (e.g., Speaker-0, Speaker-1). Traditional training needs to match predicted speakers to ground-truth speakers, trying every possible permutation (PIL) — very expensive when many speakers exist!&lt;/p&gt;
&lt;div style=&#34;text-align: justify; font-size: 15px; margin-top: -15px;&#34; markdown=&#34;1&#34;&gt;
&lt;p&gt;&lt;strong&gt;Sortformer&lt;/strong&gt; solves this by introducing &lt;strong&gt;Sort Loss&lt;/strong&gt;:&lt;/p&gt;
&lt;ul style=&#34;margin-top: -15px; margin-bottom: 0; padding-left: 30px;&#34;&gt;
&lt;li style=&#34;margin-bottom: 0px;&#34; markdown=&#34;1&#34;&gt;Sort speakers &lt;code&gt; by their speaking start time &lt;/code&gt; (Arrival Time Order — ATO)&lt;/li&gt;
&lt;li style=&#34;margin-bottom: 0px;&#34;&gt;Always treat the first speaker as Speaker-0, second as Speaker-1, etc&lt;/li&gt;
&lt;li style=&#34;margin-bottom: 0px;&#34;&gt;No need for heavy permutation matching!&lt;/li&gt;
&lt;/div&gt;
&lt;h3 id=&#34;-what-is-the-permutation-problem-in-speaker-diarization&#34;&gt;🌟 What Is the Permutation Problem in Speaker Diarization?&lt;/h3&gt;
&lt;p&gt;Speaker diarization systems assign speaker labels to segments of audio. But unlike speaker identification, the identities are generic &lt;code&gt; Speaker-0 &lt;/code&gt;, &lt;code&gt; Speaker-1 &lt;/code&gt;, etc. That creates a permutation problem: the system might label Speaker-A as Speaker-0 in one instance and Speaker-1 in another. Traditionally, this is handled using Permutation Invariant Loss (PIL) or Permutation Invariant Training (PIT):&lt;/p&gt;
&lt;ul style=&#34;margin-top: -15px; margin-bottom: 10px; padding-left: 30px;&#34;&gt;
&lt;li&gt;PIL checks all possible mappings of predicted labels to ground-truth and picks the one with the lowest loss.
&lt;/li&gt;
&lt;li&gt;It becomes expensive as the number of speakers increases: time complexity is &lt;code&gt;O(N!)&lt;/code&gt; or at best &lt;code&gt;O(N³)&lt;/code&gt; using the Hungarian algorithm.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s where Sortformer introduces a breakthrough idea. Why not just sort speakers by who spoke first and train the model to always follow this order? This is the foundation of Sort Loss.&lt;/p&gt;
&lt;h3 id=&#34;how-sortformer-training-works&#34;&gt;How Sortformer Training Works&lt;/h3&gt;
&lt;p&gt;The training steps are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Input audio&lt;/strong&gt; ➔ Extract frame-wise features.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sort the ground-truth speakers&lt;/strong&gt; by their &lt;strong&gt;start time&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Model predicts&lt;/strong&gt; frame-level speaker activities independently (using Sigmoid).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Calculate Sort Loss&lt;/strong&gt;: Match model outputs with sorted true labels using &lt;strong&gt;Binary Cross-Entropy&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Backpropagate&lt;/strong&gt; and update model.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;✅ Speakers who speak earlier are consistently mapped to earlier speaker labels during training!&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-sort-loss-formula&#34;&gt;📜 Sort Loss Formula&lt;/h3&gt;
&lt;p&gt;The Sort Loss formula is:
$$L_{\text{Sort}}(Y, P) = \frac{1}{K} \sum_{k=1}^{K} \text{BCE}(y_{\eta(k)}, q_k)$$
where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$Y$ = ground-truth speaker activities.&lt;/li&gt;
&lt;li&gt;$P$ = predicted speaker probabilities.&lt;/li&gt;
&lt;li&gt;$\eta(k)$ = the sorted index by arrival time.&lt;/li&gt;
&lt;li&gt;$K$ = number of speakers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BCE&lt;/strong&gt; = Binary Cross-Entropy loss for each speaker&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;✅ Each speaker is evaluated independently.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-why-binary-cross-entropy-bce-not-normal-cross-entropy&#34;&gt;🤔 Why Binary Cross-Entropy (BCE), Not Normal Cross-Entropy?&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Feature&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Cross Entropy (CE)&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Binary Cross Entropy (BCE)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Use case&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Single-label classification&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Multi-label classification&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Output Activation&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Softmax (probabilities sum to 1)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sigmoid (independent probabilities)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Can handle overlaps?&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;❌ No&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;✅ Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Example&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Pick one animal (cat, dog, rabbit)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Pick all fruits you like (apple, banana, grape)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In speaker diarization:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Multiple speakers can talk at once&lt;/strong&gt; ➔ multi-label ➔ &lt;strong&gt;Binary Cross Entropy is needed&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Each speaker is predicted &lt;strong&gt;independently&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-tiny-example-of-sort-loss-in-action&#34;&gt;🔥 Tiny Example of Sort Loss in Action&lt;/h3&gt;
&lt;p&gt;Suppose we have 2 speakers and 3 frames:&lt;/p&gt;
&lt;p&gt;Ground-truth (after sorting):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Frame&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;spk0&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;spk1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;t1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;t2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;t3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Predicted outputs:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Frame&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;spk0&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;spk1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;t1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.9&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;t2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;t3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Binary Cross Entropy is applied &lt;strong&gt;separately for each speaker&lt;/strong&gt;, and averaged over speakers.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-quick-summary-softmax-vs-sigmoid&#34;&gt;🧠 Quick Summary: Softmax vs Sigmoid&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Softmax&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sigmoid&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sum of outputs&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Not necessarily&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Mutual exclusivity&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Yes&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Application&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Single-label classification (only 1 class active)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Multi-label classification (multiple active)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Used with&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Cross Entropy Loss&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Binary Cross Entropy Loss&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;✅ &lt;strong&gt;Softmax&lt;/strong&gt; is used with Cross Entropy.&lt;br&gt;
✅ &lt;strong&gt;Sigmoid&lt;/strong&gt; is used with Binary Cross Entropy.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-conclusion&#34;&gt;📦 Conclusion&lt;/h3&gt;
&lt;p&gt;✅ Sortformer introduces a faster, more elegant solution for speaker diarization by sorting speakers by arrival time and applying simple Binary Cross-Entropy.&lt;/p&gt;
&lt;p&gt;✅ BCE and Sigmoid are natural choices when multiple speakers can overlap.&lt;/p&gt;
&lt;p&gt;✅ No more expensive permutation matching is needed!&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-final-words&#34;&gt;🏁 Final Words&lt;/h3&gt;
&lt;p&gt;This approach is simpler, faster, and works better for multi-speaker real-world conversations.
Stay tuned for more tutorials where we dive into multispeaker ASR models and joint training with speaker supervision!&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
